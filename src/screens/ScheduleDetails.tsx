import React from 'react';
import { View, StyleSheet, ScrollView, Text, StatusBar, TouchableOpacity, Alert } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { ArrowLeft, User, Users, Clock, MapPin, Zap, FileText } from 'lucide-react-native';

// Import custom components
import TopBar from '../components/ui/TopBar';
import ListItem from '../components/ui/ListItem';

// Import colors
import { COLORS } from '../constants/colors';

// Import game service and types
import { Game, gameService } from '../services/gameService';

interface ScheduleDetailsProps {
  schedule: Game;
  onBack: () => void;
  onDeleteSchedule: (scheduleId: string) => void;
}

const ScheduleDetails: React.FC<ScheduleDetailsProps> = ({ schedule, onBack, onDeleteSchedule }) => {
  const formattedDateTime = gameService.formatGameDateTime(schedule.scheduled_date, schedule.scheduled_time);

  // Extract partner information from notes for doubles games
  const getPartnerInfo = () => {
    if (schedule.game_type === 'doubles' && schedule.notes) {
      const partnerMatch = schedule.notes.match(/with partner: (.+?)(?:\.|$)/);
      if (partnerMatch && partnerMatch[1]) {
        return partnerMatch[1].trim();
      }
    }
    return null;
  };

  const partnerName = getPartnerInfo();

  // Clean notes by removing partner information and other auto-generated text
  const getUserNotes = () => {
    if (!schedule.notes) return '';
    
    console.log('🔍 Original notes:', JSON.stringify(schedule.notes));
    
    // Remove "with partner:" info - be more aggressive with the regex
    let cleanedNotes = schedule.notes
      .replace(/with partner:\s*.+?\.?\s*$/gi, '') // Remove to end of string
      .replace(/with partner:\s*.+?\.\s*/gi, '')   // Remove with period
      .replace(/with partner:\s*.+?\s*/gi, '')     // Remove without period
      .trim();
    
    console.log('🧹 After partner removal:', JSON.stringify(cleanedNotes));
    
    // If nothing is left, return empty
    if (!cleanedNotes || cleanedNotes.length === 0) {
      console.log('✅ No content left after partner removal');
      return '';
    }
    
    // Check if remaining text is auto-generated
    const isAutoGeneratedText = (text: string) => {
      const lowerText = text.trim().toLowerCase();
      
      // Check for auto-generated patterns
      const autoPatterns = [
        /looking for \w+ players at \w+ level/,
        /looking for singles players/,
        /looking for doubles players/,
        /players at .* level/
      ];
      
      return autoPatterns.some(pattern => pattern.test(lowerText));
    };
    
    // If what's left is auto-generated, return empty string
    if (isAutoGeneratedText(cleanedNotes)) {
      console.log('🤖 Remaining text is auto-generated, removing');
      return '';
    }
    
    console.log('📝 Final user notes:', JSON.stringify(cleanedNotes));
    return cleanedNotes;
  };

  const userNotes = getUserNotes();

  // Check if we have valid user notes (not auto-generated)
  const hasValidNotes = userNotes && 
    userNotes.length > 0 && 
    userNotes !== 'null' && 
    userNotes !== 'undefined' &&
    userNotes !== 'No notes' &&
    userNotes !== 'N/A' &&
    userNotes !== '-';

  console.log('📝 Partner info:', { partnerName, userNotes, hasValidNotes });

  const handleCancelSchedule = () => {
    Alert.alert(
      'Cancel Schedule',
      'Are you sure you want to cancel this schedule? Participants will be notified of the cancellation.',
      [
        {
          text: 'Keep Schedule',
          style: 'cancel',
        },
        {
          text: 'Cancel Schedule',
          style: 'destructive',
          onPress: () => onDeleteSchedule(schedule.id),
        },
      ]
    );
  };

  // Game type chip
  const gameTypeChip = schedule.game_type.charAt(0).toUpperCase() + schedule.game_type.slice(1);
  const gameTypeChipBackground = schedule.game_type === 'singles' ? '#96BE6B' : '#4DAAC2';

  return (
    <SafeAreaView style={styles.safeArea} edges={[]}>
      <StatusBar barStyle="dark-content" />
      
      <TopBar
        title="Scheduled Game"
        leftIcon={<ArrowLeft size={24} color="#000000" />}
        onLeftIconPress={onBack}
        style={styles.topBar}
        titleContainerStyle={styles.titleContainer}
        titleStyle={styles.titleStyle}
      />

      <ScrollView style={styles.scrollContainer} contentContainerStyle={styles.scrollContent}>
        {/* Type Section */}
        <ListItem
          title="Type"
          chips={[gameTypeChip]}
          chipBackgrounds={[gameTypeChipBackground]}
          avatarIcon={<User size={20} color="#000000" />}
          style={styles.listItem}
        />

        {/* Your Partner Section - Only for doubles games */}
        {schedule.game_type === 'doubles' && partnerName && (
          <ListItem
            title="Your Partner"
            chips={[partnerName]}
            chipBackgrounds={['rgba(0, 0, 0, 0.07)']}
            avatarIcon={<Users size={20} color="#000000" />}
            style={styles.listItem}
          />
        )}

        {/* Time Section */}
        <ListItem
          title="Time"
          chips={[formattedDateTime]}
          chipBackgrounds={['rgba(0, 0, 0, 0.07)']}
          avatarIcon={<Clock size={20} color="#000000" />}
          style={styles.listItem}
        />

        {/* Locations Section */}
        <ListItem
          title="Locations"
          chips={[schedule.venue_name]}
          chipBackgrounds={['rgba(0, 0, 0, 0.07)']}
          avatarIcon={<MapPin size={20} color="#000000" />}
          style={styles.listItem}
        />

        {/* Level Section */}
        <ListItem
          title="Level"
          chips={[schedule.skill_level.charAt(0).toUpperCase() + schedule.skill_level.slice(1)]}
          chipBackgrounds={['rgba(0, 0, 0, 0.07)']}
          avatarIcon={<Zap size={20} color="#000000" />}
          style={styles.listItem}
        />

        {/* My Notes Section - Only show real user notes */}
        {hasValidNotes && (
          <ListItem
            title="My Notes"
            chips={[userNotes]}
            chipBackgrounds={['rgba(0, 0, 0, 0.07)']}
            avatarIcon={<FileText size={20} color="#000000" />}
            style={styles.listItem}
          />
        )}
      </ScrollView>

      {/* Cancel Schedule Button */}
      <View style={styles.buttonContainer}>
        <TouchableOpacity style={styles.cancelButton} onPress={handleCancelSchedule}>
          <Text style={styles.cancelButtonText}>Cancel Schedule</Text>
        </TouchableOpacity>
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: COLORS.BACKGROUND_PRIMARY,
  },
  topBar: {
    backgroundColor: COLORS.BACKGROUND_PRIMARY,
  },
  titleContainer: {
    position: 'absolute',
    left: 0,
    right: 0,
    alignItems: 'center',
    justifyContent: 'center',
  },
  titleStyle: {
    fontSize: 20,
    fontFamily: 'InterTight-ExtraBold',
    fontWeight: '800',
    color: '#000000',
    textAlign: 'center',
  },
  scrollContainer: {
    flex: 1,
  },
  scrollContent: {
    padding: 16,
    paddingBottom: 32,
  },
  listItem: {
    marginBottom: 12,
  },
  buttonContainer: {
    padding: 16,
    paddingBottom: 32,
  },
  cancelButton: {
    backgroundColor: '#000000',
    borderRadius: 100,
    paddingVertical: 16,
    alignItems: 'center',
    justifyContent: 'center',
  },
  cancelButtonText: {
    fontSize: 16,
    fontFamily: 'InterTight-ExtraBold',
    fontWeight: '800',
    color: '#FFFFFF',
  },
});

export default ScheduleDetails; 